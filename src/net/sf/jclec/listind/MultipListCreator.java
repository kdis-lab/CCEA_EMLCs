package net.sf.jclec.listind;

import java.util.ArrayList;
import java.util.Collections;

import net.sf.jclec.ISpecies;

import net.sf.jclec.base.AbstractCreator;

/**
 * Creation of MultipLlistIndividual for Multiple subpopulations (and subclasses).
 * 
 * @author Jose M. Moyano
 * @author Sebastian Ventura
 */

public class MultipListCreator extends AbstractCreator 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	private static final long serialVersionUID = -2638928425169895614L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
	
	// Operation variables
	
	/** Associated species */
	protected transient MultipListSpecies species;
	
	/** Genotype schema */
	protected transient MultipListGenotype schema;
	
	/**
	 * Max int value for the list
	 */
	protected transient int maxInt;
	
	/**
	 * Size of the list
	 */
	protected transient int k;

	/**
	 * Identifier of subpop
	 */
	protected transient int subpop;

	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	public MultipListCreator() 
	{
		super();
	}
	
	/**
	 * Constructor with parameters
	 */
	public MultipListCreator(int subpop, int k, int maxInt) 
	{
		super();
		this.subpop = subpop;
		this.k = k;
		this.maxInt = maxInt;
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	// java.lang.Object methods
	
	/**
	 * {@inheritDoc}
	 */
	
	@Override
	public boolean equals(Object other)
	{
		if (other instanceof MultipListCreator){
			return true;
		}
		else {
			return false;
		}
	}
	
	/**
	 * Sets the max int for the list
	 * 
	 * @param maxInt maxInt
	 */
	public void setMaxInt(int maxInt) {
		this.maxInt = maxInt;
	}
	
	/**
	 * Sets the size for the list
	 * 
	 * @param maxInt maxInt
	 */
	public void setK(int k) {
		this.k = k;
	}
	
	/**
	 * Set index of subpopulation
	 * 
	 * @param p Index of subpopulation
	 */
	public void setSubpopId(int subpop) {
		this.subpop = subpop;
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	// AbstractCreator methods
	
	/**
	 * {@inheritDoc}
	 */
	
	@Override
	protected void prepareCreation() 
	{
		ISpecies spc = context.getSpecies();
		if (spc instanceof MultipListSpecies) {
			// Sets individual species
			this.species = (MultipListSpecies) spc;
			// Sets genotype schema
			this.schema = this.species.getGenotypeSchema();
		}
		else {
			throw new IllegalStateException("Illegal species in context");
		}
	}

	/**
	 * {@inheritDoc}
	 */
	
	@Override
	protected void createNext() 
	{
		createdBuffer.add(species.createIndividual(createGenotype(subpop, k, maxInt)));
	}
	
	
	/////////////////////////////////////////////////////////////////
	// ---------------------------------------------- Private methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Create a byte MultipListGenotype genotype, filling it randomly
	 */
	protected MultipListGenotype createGenotype(int subpop, int k, int maxInt)
	{
		ArrayList<Integer> list = new ArrayList<Integer>(k);
		int r;

		while(list.size() < k) {
			r = randgen.choose(0, maxInt);
			if(!list.contains(r)) {
				list.add(r);
			}
		}
		
		Collections.sort(list);
		
		return new MultipListGenotype(subpop, list);
	}
}

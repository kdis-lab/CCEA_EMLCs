package net.sf.jclec.listind;

import net.sf.jclec.IFitness;
import net.sf.jclec.IIndividual;

/**
 * Individual with a list of ints as genotype.
 * 
 * It allows individuals of multiple subpopulations.
 *  
 * @author Joes M. Moyano
 * @author Sebastian Ventura
 */

@SuppressWarnings("deprecation")
public class MultipListIndividual extends AbstractMultipListIndividual 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////

	/** Generated by eclipse */
	
	private static final long serialVersionUID = 6227386750669278917L;
	
	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Empty constructor
	 */
	public MultipListIndividual() 
	{
		super();
	}

	/**
	 * Constructor that sets individual genotype.
	 * 
	 * @param genotype Individual genotype
	 */
	public MultipListIndividual(MultipListGenotype genotype) 
	{
		super(genotype);
	}


	/**
	 * Constructor that sets individual genotype and fitness.
	 * 
	 * @param genotype Individual genotype
	 * @param fitness  Individual fitness
	 */
	public MultipListIndividual(MultipListGenotype genotype, IFitness fitness) 
	{
		super(genotype, fitness);
	}
		
	
	/**
	 * Sets the identifier of subpopulation
	 * 
	 * @param p Sub-population identifier
	 */
	public void setSubpop(int p) {
		this.genotype.subpop = p;
	}
	
	/**
	 * Get identifier of subpopulation of the individual
	 * 
	 * @return Identifier of subpopulation
	 */
	public int getSubpop() {
		return this.genotype.subpop;
	}


	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
		
	// IIndividual methods
		
	/**
	 * {@inheritDoc}
	 */
	public IIndividual copy() 
	{
		// Create new individuals, then return it
		if (fitness != null) {
			return new MultipListIndividual(this.genotype.clone(), fitness.copy());			
		}
		else {
			return new MultipListIndividual(this.genotype.clone());			
		}
	}

	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object other) 
	{
		if (other instanceof MultipListIndividual) {
			MultipListIndividual baother = (MultipListIndividual) other;
			return this.genotype.toString().equals(baother.genotype.toString());
		}
		else {
			return false;
		}
	}
	
	@Override
	public String toString() {
		return new String(genotype.toString());
	}

	@Override
	public double distance(IIndividual other) {
		// TODO Auto-generated method stub
		return 0;
	}
}

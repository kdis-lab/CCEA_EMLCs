package net.sf.jclec.binarray;

import net.sf.jclec.ISpecies;

import net.sf.jclec.base.AbstractCreator;

/**
 * Creation of BinArrayIndividual (and subclasses).
 *  
 * @author Sebastian Ventura
 */

public class MultipBinArrayCreator extends AbstractCreator 
{
	/////////////////////////////////////////////////////////////////
	// --------------------------------------- Serialization constant
	/////////////////////////////////////////////////////////////////
	
	/** Generated by Eclipse */
	
	private static final long serialVersionUID = -2638928425169895614L;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------- Internal variables
	/////////////////////////////////////////////////////////////////
	
	// Operation variables
	
	/** Associated species */
	
	protected transient MultipBinArraySpecies species;
	
	/** Genotype schema */
	
	protected transient byte [] schema;
	
	/** Subpop identifier */
	protected transient int p;

	/////////////////////////////////////////////////////////////////
	// ------------------------------------------------- Constructors
	/////////////////////////////////////////////////////////////////
	
	public MultipBinArrayCreator() 
	{
		super();
		p = -1;
	}
	
	public MultipBinArrayCreator(int p) 
	{
		super();
		this.p = p;
	}
	
	public void setSubpopId(int p) {
		this.p = p;
	}

	/////////////////////////////////////////////////////////////////
	// ----------------------------------------------- Public methods
	/////////////////////////////////////////////////////////////////
	
	// java.lang.Object methods
	
	/**
	 * {@inheritDoc}
	 */
	
	@Override
	public boolean equals(Object other)
	{
		if (other instanceof MultipBinArrayCreator){
			return true;
		}
		else {
			return false;
		}
	}

	/////////////////////////////////////////////////////////////////
	// -------------------------------------------- Protected methods
	/////////////////////////////////////////////////////////////////
	
	// AbstractCreator methods
	
	/**
	 * {@inheritDoc}
	 */
	
	@Override
	protected void prepareCreation() 
	{
		ISpecies spc = context.getSpecies();
		if (spc instanceof MultipBinArraySpecies) {
			// Sets individual species
			this.species = (MultipBinArraySpecies) spc;
			// Sets genotype schema
			this.schema = this.species.getGenotypeSchema();
		}
		else {
			throw new IllegalStateException("Illegal species in context");
		}
	}

	/* 
	 * Este mtodo fija el schema que vamos a utilizar para crear los genotipos
	 * de los nuevos individuos. Para ello, asegura que el objeto species que
	 * representa a los individuos de la poblacin es de tipo IBinArraySpecies.
	 * En caso negativo, lanza una excepcin.
	 */

	/**
	 * {@inheritDoc}
	 */
	
	@Override
	protected void createNext() 
	{
		createdBuffer.add(species.createIndividual(createGenotype(), p));
	}
	
	/* 
	 * Este objeto crea los cromosomas de los individuos consultando su schema. Para 
	 * la posicin i-sima del schema, si el valor de ste es '0' o '1' asignar el
	 * mismo valor presente en el schema. Si el valor es '*' asignar un valor del
	 * conjunto {0,1} elegido al azar.
	 */

	/////////////////////////////////////////////////////////////////
	// ---------------------------------------------- Private methods
	/////////////////////////////////////////////////////////////////
	
	/**
	 * Create a byte [] genotype, filling it randomly
	 */
	
	private final byte [] createGenotype()
	{
		int gl = schema.length;
		byte [] result = new byte[gl];
		for(int i=0; i<gl; i++) {
			if (schema[i] == -1 ) {
				result[i] = (byte) randgen.choose(0,2);
			}
			else {
				result[i] = schema[i];	
			}
		}		
		return result;
	}
}
